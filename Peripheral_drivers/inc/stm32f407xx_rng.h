
#ifndef STM32F407XX_RNG_H
#define STM32F407XX_RNG_H

#include "stm32f407xx.h"
#include "stm32f407xx_common_macro.h"
#include <stdint.h>
#include <stdlib.h>

/***********************************************************************
RNG driver functions prototype
***********************************************************************/

/**
*@brief 		RNG clock enable/disable
*@param			@EN/DI in stm32f407xx_common_macro.h
*@return		None 
*/
void RNG_CLK_ctr(uint8_t enOrDis);

/**
*@brief 		RNG enable/disable
*@param			@EN/DI in stm32f407xx_common_macro.h
*@return		None 
*/
void RNG_periph_ctr(uint8_t enOrDis);

/**
*@brief			Initilize RNG
*@param 		None
*@return 		None
*/
void RNG_init(void);

/**
*@brief 		Deinitialize RNG
*@param 	None
*@return 	None
*/
void RNG_deinit(void);

/**
*@brief 		Read 32-bits random value generated by RNG (interrupt base)
*@param 	None
*@return 	32-bits random value
*/
uint32_t RNG_get(void);

/**
*@brief 		Enable/disable RNG 's interrupt 
*@param	Enable or disable
*@return 	None
*/	
void RNG_intrpt_ctr(uint8_t enOrDis);

/**
*@brief 		Enable/disable RNG 's interrupt request in NVIC 
*@param 	RNG 's IRQ number
*@param	Enable or disable
*@return 	None
*/
void RNG_intrpt_vector_ctr(uint8_t IRQnumber, uint8_t enOrDis);

/**
*@brief 		Config priority for RNG 's interrupt 
*@param 	IRQ number
*@param 	Priority
*@return 	None
*/
void RNG_intrpt_priority_config(uint8_t IRQnumber, uint8_t priority);

/**
*@brief 		RNG 's interrupt handler
*@return 	None
*/
void RNG_intrpt_handler (void);

#endif
